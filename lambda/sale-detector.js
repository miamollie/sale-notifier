"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const axios = require("axios");
const cheerio = require("cheerio");
// Set region
AWS.config.region = process.env.AWS_REGION;
// Create publish parameters
const params = {
    Message: "something to do with the sale URL?" /* required */,
    TopicArn: "arn:aws:sns:us-east-1:424795685451:saleTopic",
    Subject: "New sale detected",
};
// Create promise and SNS service object
const publishMessage = new AWS.SNS().publish(params).promise();
const SALE_URL = "https://www.lululemon.com.au/en-au/p/free-to-be-serene-bra-light-support%2C-c%2Fd-cup/prod8430423.html";
const SALE_IDENTIFIER = ".cta-price-value .list-price";
exports.handler = async function () {
    console.log("Checking for sale");
    const foundSale = await detectSale(SALE_URL);
    if (foundSale) {
        publishMessage
            .then(function () {
            console.log(`Message ${params.Message} sent to the topic ${params.TopicArn}`);
        })
            .catch(function (err) {
            console.error(err, err.stack);
        });
    }
    return { statusCode: 200 };
};
async function detectSale(url) {
    const response = await axios(url).catch((e) => console.log(e));
    const html = response.data;
    const $ = cheerio.load(html);
    const salePriceFound = $(SALE_IDENTIFIER);
    console.log("Sale:" + !!salePriceFound);
    return !!salePriceFound;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FsZS1kZXRlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNhbGUtZGV0ZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBZ0M7QUFDaEMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNuQyxhQUFhO0FBQ2IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7QUFFM0MsNEJBQTRCO0FBQzVCLE1BQU0sTUFBTSxHQUFHO0lBQ2IsT0FBTyxFQUFFLG9DQUFvQyxDQUFDLGNBQWM7SUFDNUQsUUFBUSxFQUFFLDhDQUE4QztJQUN4RCxPQUFPLEVBQUUsbUJBQW1CO0NBQzdCLENBQUM7QUFFRix3Q0FBd0M7QUFDeEMsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQy9ELE1BQU0sUUFBUSxHQUNaLHdHQUF3RyxDQUFDO0FBQzNHLE1BQU0sZUFBZSxHQUFHLDhCQUE4QixDQUFDO0FBRXZELE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSztJQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDakMsTUFBTSxTQUFTLEdBQUcsTUFBTSxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFN0MsSUFBSSxTQUFTLEVBQUU7UUFDYixjQUFjO2FBQ1gsSUFBSSxDQUFDO1lBQ0osT0FBTyxDQUFDLEdBQUcsQ0FDVCxXQUFXLE1BQU0sQ0FBQyxPQUFPLHNCQUFzQixNQUFNLENBQUMsUUFBUSxFQUFFLENBQ2pFLENBQUM7UUFDSixDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsVUFBVSxHQUFRO1lBQ3ZCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztLQUNOO0lBRUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUM3QixDQUFDLENBQUM7QUFFRixLQUFLLFVBQVUsVUFBVSxDQUFDLEdBQVc7SUFDbkMsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBUSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEUsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztJQUMzQixNQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLE1BQU0sY0FBYyxHQUFHLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDeEMsT0FBTyxDQUFDLENBQUMsY0FBYyxDQUFDO0FBQzFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQVdTID0gcmVxdWlyZShcImF3cy1zZGtcIik7XG5jb25zdCBheGlvcyA9IHJlcXVpcmUoXCJheGlvc1wiKTtcbmNvbnN0IGNoZWVyaW8gPSByZXF1aXJlKFwiY2hlZXJpb1wiKTtcbi8vIFNldCByZWdpb25cbkFXUy5jb25maWcucmVnaW9uID0gcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTjtcblxuLy8gQ3JlYXRlIHB1Ymxpc2ggcGFyYW1ldGVyc1xuY29uc3QgcGFyYW1zID0ge1xuICBNZXNzYWdlOiBcInNvbWV0aGluZyB0byBkbyB3aXRoIHRoZSBzYWxlIFVSTD9cIiAvKiByZXF1aXJlZCAqLyxcbiAgVG9waWNBcm46IFwiYXJuOmF3czpzbnM6dXMtZWFzdC0xOjQyNDc5NTY4NTQ1MTpzYWxlVG9waWNcIixcbiAgU3ViamVjdDogXCJOZXcgc2FsZSBkZXRlY3RlZFwiLFxufTtcblxuLy8gQ3JlYXRlIHByb21pc2UgYW5kIFNOUyBzZXJ2aWNlIG9iamVjdFxuY29uc3QgcHVibGlzaE1lc3NhZ2UgPSBuZXcgQVdTLlNOUygpLnB1Ymxpc2gocGFyYW1zKS5wcm9taXNlKCk7XG5jb25zdCBTQUxFX1VSTCA9XG4gIFwiaHR0cHM6Ly93d3cubHVsdWxlbW9uLmNvbS5hdS9lbi1hdS9wL2ZyZWUtdG8tYmUtc2VyZW5lLWJyYS1saWdodC1zdXBwb3J0JTJDLWMlMkZkLWN1cC9wcm9kODQzMDQyMy5odG1sXCI7XG5jb25zdCBTQUxFX0lERU5USUZJRVIgPSBcIi5jdGEtcHJpY2UtdmFsdWUgLmxpc3QtcHJpY2VcIjtcblxuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zb2xlLmxvZyhcIkNoZWNraW5nIGZvciBzYWxlXCIpO1xuICBjb25zdCBmb3VuZFNhbGUgPSBhd2FpdCBkZXRlY3RTYWxlKFNBTEVfVVJMKTtcblxuICBpZiAoZm91bmRTYWxlKSB7XG4gICAgcHVibGlzaE1lc3NhZ2VcbiAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgYE1lc3NhZ2UgJHtwYXJhbXMuTWVzc2FnZX0gc2VudCB0byB0aGUgdG9waWMgJHtwYXJhbXMuVG9waWNBcm59YFxuICAgICAgICApO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIsIGVyci5zdGFjayk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7IHN0YXR1c0NvZGU6IDIwMCB9O1xufTtcblxuYXN5bmMgZnVuY3Rpb24gZGV0ZWN0U2FsZSh1cmw6IHN0cmluZykge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zKHVybCkuY2F0Y2goKGU6IEVycm9yKSA9PiBjb25zb2xlLmxvZyhlKSk7XG4gIGNvbnN0IGh0bWwgPSByZXNwb25zZS5kYXRhO1xuICBjb25zdCAkID0gY2hlZXJpby5sb2FkKGh0bWwpO1xuICBjb25zdCBzYWxlUHJpY2VGb3VuZCA9ICQoU0FMRV9JREVOVElGSUVSKTtcbiAgY29uc29sZS5sb2coXCJTYWxlOlwiICsgISFzYWxlUHJpY2VGb3VuZCk7XG4gIHJldHVybiAhIXNhbGVQcmljZUZvdW5kO1xufVxuIl19