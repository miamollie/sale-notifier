"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Load the AWS SDK for Node.js
const AWS = require("aws-sdk");
// Set the region
AWS.config.region = process.env.AWS_REGION;
const ses = new AWS.SES();
//Get Email Addresses
const senderEmailAddress = process.env.SES_SENDER_IDENTITY; //TODO set this
const receiverEmailAddress = process.env.SES_RECEIVER_IDENTITY; //TODO set this
exports.handler = async function (event) {
    var params = {
        Destination: {
            ToAddresses: [receiverEmailAddress /* RECEIVER email address */],
        },
        Message: {
            Body: {
                Html: {
                    Charset: "UTF-8",
                    Data: "Found item on sale" +
                        event.saleURL /* customize html version of email body */,
                },
                Text: {
                    Charset: "UTF-8",
                    Data: "Found item on sale" +
                        event.saleURL /* customize text version of email body */,
                },
            },
            Subject: {
                Charset: "UTF-8",
                Data: "New item on sale",
            },
        },
        Source: senderEmailAddress /* required: verified Amazon SES identity FROM email address */,
        ReplyToAddresses: [
            senderEmailAddress /* verified Amazon SES identity FROM email address */,
        ],
    };
    // Send to SES
    const result = await ses.sendEmail(params).promise();
    console.log(result);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FsZS1ub3RpZmllci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNhbGUtbm90aWZpZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBK0I7QUFDL0IsK0JBQWdDO0FBQ2hDLGlCQUFpQjtBQUNqQixHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztBQUMzQyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixxQkFBcUI7QUFDckIsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUMsZUFBZTtBQUMzRSxNQUFNLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQyxlQUFlO0FBRS9FLE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxXQUFXLEtBQTBCO0lBQzFELElBQUksTUFBTSxHQUFHO1FBQ1gsV0FBVyxFQUFFO1lBQ1gsV0FBVyxFQUFFLENBQUMsb0JBQW9CLENBQUMsNEJBQTRCLENBQUM7U0FDakU7UUFDRCxPQUFPLEVBQUU7WUFDUCxJQUFJLEVBQUU7Z0JBQ0osSUFBSSxFQUFFO29CQUNKLE9BQU8sRUFBRSxPQUFPO29CQUNoQixJQUFJLEVBQ0Ysb0JBQW9CO3dCQUNwQixLQUFLLENBQUMsT0FBTyxDQUFDLDBDQUEwQztpQkFDM0Q7Z0JBQ0QsSUFBSSxFQUFFO29CQUNKLE9BQU8sRUFBRSxPQUFPO29CQUNoQixJQUFJLEVBQ0Ysb0JBQW9CO3dCQUNwQixLQUFLLENBQUMsT0FBTyxDQUFDLDBDQUEwQztpQkFDM0Q7YUFDRjtZQUNELE9BQU8sRUFBRTtnQkFDUCxPQUFPLEVBQUUsT0FBTztnQkFDaEIsSUFBSSxFQUFFLGtCQUFrQjthQUN6QjtTQUNGO1FBQ0QsTUFBTSxFQUNKLGtCQUFrQixDQUFDLCtEQUErRDtRQUNwRixnQkFBZ0IsRUFBRTtZQUNoQixrQkFBa0IsQ0FBQyxxREFBcUQ7U0FDekU7S0FDRixDQUFDO0lBQ0YsY0FBYztJQUNkLE1BQU0sTUFBTSxHQUFHLE1BQU0sR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNyRCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExvYWQgdGhlIEFXUyBTREsgZm9yIE5vZGUuanNcbmltcG9ydCBBV1MgPSByZXF1aXJlKFwiYXdzLXNka1wiKTtcbi8vIFNldCB0aGUgcmVnaW9uXG5BV1MuY29uZmlnLnJlZ2lvbiA9IHByb2Nlc3MuZW52LkFXU19SRUdJT047XG5jb25zdCBzZXMgPSBuZXcgQVdTLlNFUygpO1xuLy9HZXQgRW1haWwgQWRkcmVzc2VzXG5jb25zdCBzZW5kZXJFbWFpbEFkZHJlc3MgPSBwcm9jZXNzLmVudi5TRVNfU0VOREVSX0lERU5USVRZOyAvL1RPRE8gc2V0IHRoaXNcbmNvbnN0IHJlY2VpdmVyRW1haWxBZGRyZXNzID0gcHJvY2Vzcy5lbnYuU0VTX1JFQ0VJVkVSX0lERU5USVRZOyAvL1RPRE8gc2V0IHRoaXNcblxuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgZnVuY3Rpb24gKGV2ZW50OiB7IHNhbGVVUkw6IHN0cmluZyB9KSB7XG4gIHZhciBwYXJhbXMgPSB7XG4gICAgRGVzdGluYXRpb246IHtcbiAgICAgIFRvQWRkcmVzc2VzOiBbcmVjZWl2ZXJFbWFpbEFkZHJlc3MgLyogUkVDRUlWRVIgZW1haWwgYWRkcmVzcyAqL10sXG4gICAgfSxcbiAgICBNZXNzYWdlOiB7XG4gICAgICBCb2R5OiB7XG4gICAgICAgIEh0bWw6IHtcbiAgICAgICAgICBDaGFyc2V0OiBcIlVURi04XCIsXG4gICAgICAgICAgRGF0YTpcbiAgICAgICAgICAgIFwiRm91bmQgaXRlbSBvbiBzYWxlXCIgK1xuICAgICAgICAgICAgZXZlbnQuc2FsZVVSTCAvKiBjdXN0b21pemUgaHRtbCB2ZXJzaW9uIG9mIGVtYWlsIGJvZHkgKi8sXG4gICAgICAgIH0sXG4gICAgICAgIFRleHQ6IHtcbiAgICAgICAgICBDaGFyc2V0OiBcIlVURi04XCIsXG4gICAgICAgICAgRGF0YTpcbiAgICAgICAgICAgIFwiRm91bmQgaXRlbSBvbiBzYWxlXCIgK1xuICAgICAgICAgICAgZXZlbnQuc2FsZVVSTCAvKiBjdXN0b21pemUgdGV4dCB2ZXJzaW9uIG9mIGVtYWlsIGJvZHkgKi8sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgU3ViamVjdDoge1xuICAgICAgICBDaGFyc2V0OiBcIlVURi04XCIsXG4gICAgICAgIERhdGE6IFwiTmV3IGl0ZW0gb24gc2FsZVwiLFxuICAgICAgfSxcbiAgICB9LFxuICAgIFNvdXJjZTpcbiAgICAgIHNlbmRlckVtYWlsQWRkcmVzcyAvKiByZXF1aXJlZDogdmVyaWZpZWQgQW1hem9uIFNFUyBpZGVudGl0eSBGUk9NIGVtYWlsIGFkZHJlc3MgKi8sXG4gICAgUmVwbHlUb0FkZHJlc3NlczogW1xuICAgICAgc2VuZGVyRW1haWxBZGRyZXNzIC8qIHZlcmlmaWVkIEFtYXpvbiBTRVMgaWRlbnRpdHkgRlJPTSBlbWFpbCBhZGRyZXNzICovLFxuICAgIF0sXG4gIH07XG4gIC8vIFNlbmQgdG8gU0VTXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcy5zZW5kRW1haWwocGFyYW1zKS5wcm9taXNlKCk7XG4gIGNvbnNvbGUubG9nKHJlc3VsdCk7XG59O1xuIl19