"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
// Set the region
AWS.config.region = process.env.AWS_REGION;
const ses = new AWS.SES();
//Get Email Addresses
const senderEmailAddress = process.env.SES_SENDER_IDENTITY;
const receiverEmailAddress = process.env.SES_RECEIVER_IDENTITY;
exports.handler = async function (event) {
    console.warn("Notifying sale");
    console.log("Received event" + event);
    const records = event.Records.map((record) => {
        const { Message, Subject } = record.Sns;
        return { subject: Subject, message: Message };
    });
    console.log("records: ðŸ‘‰", JSON.stringify(records, null, 2));
    const subject = event.Records[0].Sns.Subject;
    const saleUrl = event.Records[0].Sns.Message;
    const params = {
        Destination: {
            ToAddresses: [receiverEmailAddress /* RECEIVER email address */],
        },
        Message: {
            Body: {
                Html: {
                    Charset: "UTF-8",
                    Data: subject + ": " + saleUrl /* customize html version of email body */,
                },
                Text: {
                    Charset: "UTF-8",
                    Data: subject + ": " + saleUrl /* customize text version of email body */,
                },
            },
            Subject: {
                Charset: "UTF-8",
                Data: "New item on sale",
            },
        },
        Source: senderEmailAddress /* required: verified Amazon SES identity FROM email address */,
        ReplyToAddresses: [
            senderEmailAddress /* verified Amazon SES identity FROM email address */,
        ],
    };
    // Send to SES
    const result = await ses
        .sendEmail(params)
        .promise();
    console.log(result);
    return {
        body: JSON.stringify({ records }),
        statusCode: 200,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FsZS1ub3RpZmllci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNhbGUtbm90aWZpZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBZ0M7QUFHaEMsaUJBQWlCO0FBQ2pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO0FBRTNDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLHFCQUFxQjtBQUNyQixNQUFNLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUM7QUFDM0QsTUFBTSxvQkFBb0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDO0FBRS9ELE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxXQUFXLEtBQWU7SUFDL0MsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0lBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFFdEMsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFXLEVBQUUsRUFBRTtRQUNoRCxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFFeEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDO0lBQ2hELENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFN0QsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO0lBQzdDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQztJQUU3QyxNQUFNLE1BQU0sR0FBRztRQUNiLFdBQVcsRUFBRTtZQUNYLFdBQVcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLDRCQUE0QixDQUFDO1NBQ2pFO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsSUFBSSxFQUFFO2dCQUNKLElBQUksRUFBRTtvQkFDSixPQUFPLEVBQUUsT0FBTztvQkFDaEIsSUFBSSxFQUNGLE9BQU8sR0FBRyxJQUFJLEdBQUcsT0FBTyxDQUFDLDBDQUEwQztpQkFDdEU7Z0JBQ0QsSUFBSSxFQUFFO29CQUNKLE9BQU8sRUFBRSxPQUFPO29CQUNoQixJQUFJLEVBQ0YsT0FBTyxHQUFHLElBQUksR0FBRyxPQUFPLENBQUMsMENBQTBDO2lCQUN0RTthQUNGO1lBQ0QsT0FBTyxFQUFFO2dCQUNQLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixJQUFJLEVBQUUsa0JBQWtCO2FBQ3pCO1NBQ0Y7UUFDRCxNQUFNLEVBQ0osa0JBQWtCLENBQUMsK0RBQStEO1FBQ3BGLGdCQUFnQixFQUFFO1lBQ2hCLGtCQUFrQixDQUFDLHFEQUFxRDtTQUN6RTtLQUNGLENBQUM7SUFDRixjQUFjO0lBQ2QsTUFBTSxNQUFNLEdBQUcsTUFBTSxHQUFHO1NBQ3JCLFNBQVMsQ0FBQyxNQUFrQyxDQUFDO1NBQzdDLE9BQU8sRUFBRSxDQUFDO0lBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVwQixPQUFPO1FBQ0wsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQztRQUNqQyxVQUFVLEVBQUUsR0FBRztLQUNoQixDQUFDO0FBQ0osQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFXUyA9IHJlcXVpcmUoXCJhd3Mtc2RrXCIpO1xuaW1wb3J0IHsgU05TRXZlbnQgfSBmcm9tIFwiYXdzLWxhbWJkYVwiO1xuXG4vLyBTZXQgdGhlIHJlZ2lvblxuQVdTLmNvbmZpZy5yZWdpb24gPSBwcm9jZXNzLmVudi5BV1NfUkVHSU9OO1xuXG5jb25zdCBzZXMgPSBuZXcgQVdTLlNFUygpO1xuXG4vL0dldCBFbWFpbCBBZGRyZXNzZXNcbmNvbnN0IHNlbmRlckVtYWlsQWRkcmVzcyA9IHByb2Nlc3MuZW52LlNFU19TRU5ERVJfSURFTlRJVFk7XG5jb25zdCByZWNlaXZlckVtYWlsQWRkcmVzcyA9IHByb2Nlc3MuZW52LlNFU19SRUNFSVZFUl9JREVOVElUWTtcblxuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgZnVuY3Rpb24gKGV2ZW50OiBTTlNFdmVudCkge1xuICBjb25zb2xlLndhcm4oXCJOb3RpZnlpbmcgc2FsZVwiKVxuICBjb25zb2xlLmxvZyhcIlJlY2VpdmVkIGV2ZW50XCIgKyBldmVudCk7XG5cbiAgY29uc3QgcmVjb3JkcyA9IGV2ZW50LlJlY29yZHMubWFwKChyZWNvcmQ6IGFueSkgPT4ge1xuICAgIGNvbnN0IHsgTWVzc2FnZSwgU3ViamVjdCB9ID0gcmVjb3JkLlNucztcblxuICAgIHJldHVybiB7IHN1YmplY3Q6IFN1YmplY3QsIG1lc3NhZ2U6IE1lc3NhZ2UgfTtcbiAgfSk7XG5cbiAgY29uc29sZS5sb2coXCJyZWNvcmRzOiDwn5GJXCIsIEpTT04uc3RyaW5naWZ5KHJlY29yZHMsIG51bGwsIDIpKTtcblxuICBjb25zdCBzdWJqZWN0ID0gZXZlbnQuUmVjb3Jkc1swXS5TbnMuU3ViamVjdDtcbiAgY29uc3Qgc2FsZVVybCA9IGV2ZW50LlJlY29yZHNbMF0uU25zLk1lc3NhZ2U7XG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIERlc3RpbmF0aW9uOiB7XG4gICAgICBUb0FkZHJlc3NlczogW3JlY2VpdmVyRW1haWxBZGRyZXNzIC8qIFJFQ0VJVkVSIGVtYWlsIGFkZHJlc3MgKi9dLFxuICAgIH0sXG4gICAgTWVzc2FnZToge1xuICAgICAgQm9keToge1xuICAgICAgICBIdG1sOiB7XG4gICAgICAgICAgQ2hhcnNldDogXCJVVEYtOFwiLFxuICAgICAgICAgIERhdGE6XG4gICAgICAgICAgICBzdWJqZWN0ICsgXCI6IFwiICsgc2FsZVVybCAvKiBjdXN0b21pemUgaHRtbCB2ZXJzaW9uIG9mIGVtYWlsIGJvZHkgKi8sXG4gICAgICAgIH0sXG4gICAgICAgIFRleHQ6IHtcbiAgICAgICAgICBDaGFyc2V0OiBcIlVURi04XCIsXG4gICAgICAgICAgRGF0YTpcbiAgICAgICAgICAgIHN1YmplY3QgKyBcIjogXCIgKyBzYWxlVXJsIC8qIGN1c3RvbWl6ZSB0ZXh0IHZlcnNpb24gb2YgZW1haWwgYm9keSAqLyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBTdWJqZWN0OiB7XG4gICAgICAgIENoYXJzZXQ6IFwiVVRGLThcIixcbiAgICAgICAgRGF0YTogXCJOZXcgaXRlbSBvbiBzYWxlXCIsXG4gICAgICB9LFxuICAgIH0sXG4gICAgU291cmNlOlxuICAgICAgc2VuZGVyRW1haWxBZGRyZXNzIC8qIHJlcXVpcmVkOiB2ZXJpZmllZCBBbWF6b24gU0VTIGlkZW50aXR5IEZST00gZW1haWwgYWRkcmVzcyAqLyxcbiAgICBSZXBseVRvQWRkcmVzc2VzOiBbXG4gICAgICBzZW5kZXJFbWFpbEFkZHJlc3MgLyogdmVyaWZpZWQgQW1hem9uIFNFUyBpZGVudGl0eSBGUk9NIGVtYWlsIGFkZHJlc3MgKi8sXG4gICAgXSxcbiAgfTtcbiAgLy8gU2VuZCB0byBTRVNcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VzXG4gICAgLnNlbmRFbWFpbChwYXJhbXMgYXMgQVdTLlNFUy5TZW5kRW1haWxSZXF1ZXN0KVxuICAgIC5wcm9taXNlKCk7XG4gIGNvbnNvbGUubG9nKHJlc3VsdCk7XG5cbiAgcmV0dXJuIHtcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHJlY29yZHMgfSksXG4gICAgc3RhdHVzQ29kZTogMjAwLFxuICB9O1xufVxuIl19